{
  "name": "minimize",
  "version": "0.5.14",
  "description": "Minimize HTML",
  "main": "./lib/minimize",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "htmlparser2": "~3.4.0",
    "utile": "~0.2.1"
  },
  "devDependencies": {
    "mocha": "~1.17.1",
    "chai": "~1.8.1",
    "sinon": "~1.7.3",
    "sinon-chai": "~2.4.0",
    "pre-commit": "0.0.4"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:Moveo/minimize.git"
  },
  "keywords": [
    "minify",
    "minimize",
    "HTML"
  ],
  "author": {
    "name": "Martijn Swaagman"
  },
  "license": "MIT",
  "readme": "[![Build Status][status]](https://travis-ci.org/Moveo/minimize)\n[![NPM version][npmimgurl]][npmurl]\n\n[status]: https://travis-ci.org/Moveo/minimize.png?branch=master\n[npmimgurl]: https://badge.fury.io/js/minimize.png\n[npmurl]: http://npmjs.org/package/minimize\n\n# HTML minifier\n\nMinimize is a HTML minifier based on the node-htmlparser. This depedency will\nensure output is solid and correct. Minimize is focussed on HTML5 and will not\nsupport older HTML drafts. It is not worth the effort and the web should move\nforward. Currently, HTML minifier is only usuable server side. Client side\nminification will be added in a future release.\n\n## Features\n\n- fast and stable html minification\n- highly configurable\n- can distinguish conditional IE comments\n- build on the foundations of htmlparser2\n\n## Upcoming in release 1.0\n\n- command line usage support\n\n## Upcoming in release 2.0\n\n- minification of inline javascript by [square](https://github.com/observing/square)\n- client side minification support\n\n## Usage\n\nTo get the minified content make sure to provide a callback. Optional an options\nobject can be provided. All options are listed below and `false` per default.\n\n```javascript\nvar Minimize = require('minimize')\n  , minimize = new Minimize({\n      empty: true,        // DO NOT remove empty attributes\n      cdata: true,        // DO NOT strip CDATA from scripts\n      comments: true,     // DO NOT remove comments\n      conditionals: true, // DO NOT remove conditional internet explorer comments\n      spare: true,        // DO NOT remove redundant attributes\n      quotes: true        // DO NOT remove arbitrary quotes\n    });\n\nminimize.parse(content, function (error, data) {\n  console.log(data);\n});\n```\n\n## Options\n\n**Empty**\n\nEmpty attributes can usually be removed, by default all are removed, excluded\nHTML5 _data-*_ and microdata attributes. To retain empty elements regardless\nvalue, do:\n\n```javascript\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ empty: true });\n\nminimize.parse(\n  '<h1 id=\"\"></h1>',\n  function (error, data) {\n    // data output: <h1 id=\"\"></h1>\n  }\n);\n```\n\n**CDATA**\n\nCDATA is only required for HTML to parse as valid XML. For normal webpages this\nis rarely the case, thus CDATA around javascript can be omitted. By default\nCDATA is removed, if you would like to keep it, pass true:\n\n```javascript\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ cdata: true });\n\nminimize.parse(\n  '<script type=\"text/javascript\">\\n//<![CDATA[\\n...code...\\n//]]>\\n</script>',\n  function (error, data) {\n    // data output: <script type=text/javascript>//<![CDATA[\\n...code...\\n//]]></script>\n  }\n);\n```\n\n**Comments**\n\nComments inside HTML are usually beneficial while developing. Hiding your\ncomments in production is sane, safe and will reduce data transfer. If you\nensist on keeping them, for instance to show a nice easter egg, set the option\nto true.\n\n```javascript\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ comments: true });\n\nminimize.parse(\n  '<!-- some HTML comment -->\\n     <div class=\"slide nodejs\">',\n  function (error, data) {\n    // data output: <!-- some HTML comment --><div class=\"slide nodejs\">\n  }\n);\n```\n\n**Conditionals**\n\nConditional comments only work in IE, and are thus excellently suited to give\nspecial instructions meant only for IE. Minimize can be configured to retain\nthese comments. But since the comments are only working until IE9 (inclusive)\nthe default is to remove the conditionals.\n\n```javascript\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ conditionals: true });\n\nminimize.parse(\n  \"<!--[if ie6]>Cover microsofts' ass<![endif]-->\\n<br>\",\n  function (error, data) {\n    // data output: <!--[if ie6]>Cover microsofts' ass<![endif]-->\\n<br>\n  }\n);\n```\n\n\n**Spare**\n\nSpare attributes are of type boolean of which the value can be omitted in HTML5.\nTo keep attributes intact for support of older browsers, supply:\n\n```javascript\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ spare: true });\n\nminimize.parse(\n  '<input type=\"text\" disabled=\"disabled\"></h1>',\n  function (error, data) {\n    // data output: <input type=text disabled=disabled></h1>\n  }\n);\n```\n\n**Qoutes**\n\nQuotes are always added around attributes that have spaces or an equal sign in\ntheir value. But if you require quotes around all attributes, simply pass\nquotes:true, like below.\n\n```javascript\nvar Minimize = require('minimize')\n  , minimize = new Minimize({ quotes: true });\n\nminimize.parse(\n  '<p class=\"paragraph\" id=\"title\">\\n    Some content\\n  </p>',\n  function (error, data) {\n    // data output: <p class=\"paragraph\" id=\"title\">Some content</p>\n  }\n);\n```\n\n## Tests\n\nTests can be easily run by using either of the following commands. Travis.ci is\nused for continous integration.\n\n```bash\nmake test\nmake test-watch\nnpm test\n```\n\n## Benchmarks\n\n\n## Credits\nMinimize is influenced by the [HTML minifier][kangax] of kangax. This module\nparses the DOM as string as opposes to an object. However, retaining flow is more\ndiffucult if the DOM is parsed sequentially. Minimize is not client-side ready.\nKangax minifier also provides some additional options like linting. Minimize\nwill retain strictly to the business of minifying. Minimize is already used in\nproduction by [Nodejitsu][nodejitsu].\n\n[node-htmlparser][fb55] of fb55 is used to create an object representation\nof the DOM.\n\n[kangax]: https://github.com/kangax/html-minifier/\n[fb55]: https://github.com/fb55/node-htmlparser/\n[nodejitsu]: http://www.nodejitsu.com/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Moveo/minimize/issues"
  },
  "_id": "minimize@0.5.14",
  "_from": "minimize@~0.5.9"
}
